[tool.poetry]
name = "crystal-web"
version = "1.10.0"
description = "Downloads websites for long-term archival."
authors = ["David Foster <david@dafoster.net>"]
readme = "README.md"
license = "Proprietary"
repository = "https://github.com/davidfstr/Crystal-Web-Archiver"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: MacOS X",
    "Environment :: Win32 (MS Windows)",
    "Environment :: X11 Applications",
    "Environment :: X11 Applications :: GTK",
    "Environment :: X11 Applications :: Gnome",
    "Environment :: X11 Applications :: KDE",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: Other/Proprietary License",
    "Natural Language :: English",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: Microsoft :: Windows :: Windows 11",
    "Operating System :: POSIX :: Linux",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Version Control",
    "Topic :: System :: Archiving :: Backup",
    "Topic :: System :: Archiving :: Mirroring",
]
packages = [
    { include = "crystal", from = "src" },
]
include = [
    "README/logo.png",
    "README/logo@2x.png",
]

[tool.isort]
src_paths = ["src/crystal", "setup/*.py", "tests"]
skip = ["lib", "test_data"]
line_length = 79
multi_line_output = 5  # vert-grid-grouped; https://pycqa.github.io/isort/docs/configuration/multi_line_output_modes.html
use_parentheses = true  # never use backslash to continue lines
include_trailing_comma = true
force_alphabetical_sort = true  # don't use separate sections for stdlib vs. 3rd party vs. 1st party imports
force_sort_within_sections = true  # combine from-imports with regular imports
order_by_type = false  # don't sort constants specially

[tool.poetry.urls]
"Tutorial" = "https://github.com/davidfstr/Crystal-Web-Archiver/tree/main#tutorial-"
"Release notes" = "https://github.com/davidfstr/Crystal-Web-Archiver/blob/main/RELEASE_NOTES.md"

[tool.poetry.scripts]
# Install "crystal" binary as CLI command. Allow installation via "pipx".
crystal = 'crystal.__main__:main'

[tool.poetry.dependencies]
# NOTE: Python 3.11 is the latest Python supported by py2exe 0.13.0.2
python = ">=3.11,<3.14"
# NOTE: When changing the version of wxPython to Y, you'll need to make sure
#       there is a precompiled wheel for {Python 3.X, wxPython Y, OS}
#       for every {Python 3.X, OS} in continuous integration (CI) jobs
#       (defined by push-github-action.yml) so that CI jobs don't take
#       a very long time to complete. If wheels are missing (which is common
#       for Linux) you'll need to precompile a .wgn yourself for the platform.
#       See instructions in: doc/how_to_make_wxpython_wagon.md
wxPython = "4.2.3"
beautifulsoup4 = "^4.9.3"
py2app = { version = "^0.28", markers = "sys_platform == 'darwin'" }
# NOTE: py2exe 0.13.0.2 only supports Python 3.11, so we use a marker to
#       ensure it is only installed on Windows with Python 3.11.
py2exe = { version = "^0.13.0.2", markers = "sys_platform == 'win32' and python_version >= '3.11' and python_version < '3.12'" }
tinycss2 = "^1.1.0"
appdirs = "^1.4.4"
colorama = "^0.4.4"
tzlocal = "^4.2"
lxml = "^5.2.2"
tqdm = "^4.65.0"
sortedcontainers = "^2.4.0"
# For manual memory leak profiling with "guppy" module
guppy3 = "^3.1.5"
xattr = { version = "^1.1.4", markers = "sys_platform == 'darwin'" }
psutil = { version = "^5.9.5", markers = "sys_platform == 'linux'" }
pywin32 = { version = "*", markers = "sys_platform == 'win32'" }
wmi = { version = "*", markers = "sys_platform == 'win32'" }
typing-extensions = "^4.8.0"
types-tqdm = "^4.66.0.20240106"
truststore = "*"

[tool.poetry.group.dev.dependencies]
pytest = ">=7.0,<8.0"
mypy = "==1.6.1"
types-tzlocal = "^4.2.0"
PyScreeze = "^0.1.28"
flameprof = "^0.4"
# Declare setuptools explicitly for setup.py and py2exe.
# Version >=70,<71 is necessary for make-mac.sh and py2app to build successfully.
setuptools = ">=70,<71"
isort = "^6.0.1"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
